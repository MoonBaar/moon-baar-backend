name: Deploy to Development Server

on:
  pull_request:
    branches: [develop]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          token: ${{ secrets.GH_PAT }}
      
      # Gradle 캐시 설정
      - name: Setup Gradle cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: ${{ runner.os }}-gradle-

      # 서브모듈 설정
      - name: Update submodule
        run: |
          git submodule update --init --remote --merge

      # GitHub Container Registry 로그인
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GH_PAT }}
      
      # 도커 빌더 설정
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Backend 이미지 빌드 및 푸시
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker-files/backend/Dockerfile
          push: true
          tags: ${{ secrets.BACKEND_IMAGE }}
          platforms: linux/arm64
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # 필요한 파일만 서버로 전송
      - name: Copy deployment files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml,docker-files/nginx/"
          target: "${{ secrets.DEPLOY_PATH }}"
          strip_components: 0

      # 백엔드 배포
      - name: Deploy backend
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.HOST }}
          port: ${{ secrets.PORT }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}

            # GitHub Container Registry 로그인 추가
            echo ${{ secrets.GH_PAT }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # 환경 변수 파일 생성
            cat > .env << EOL
            DB_ROOT_PASSWORD=${{ secrets.DB_ROOT_PASSWORD }}
            DB_HOST=${{ secrets.DB_HOST }}
            DB_NAME=${{ secrets.DB_NAME }}
            DB_USER=${{ secrets.DB_USER }}
            DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            DOMAIN_NAME=${{ secrets.DOMAIN_NAME }}
            BACKEND_PORT=${{ secrets.BACKEND_PORT }}
            NGINX_PORT=${{ secrets.NGINX_PORT }}
            DB_PORT=${{ secrets.DB_PORT }}
            BACKEND_IMAGE=${{ secrets.BACKEND_IMAGE }}
            SEOUL_API_KEY=${{ secrets.SEOUL_API_KEY }}
            BASE_URL=${{ secrets.BASE_URL }}
            EOL

            # 백엔드만 재배포
            docker-compose pull backend
            docker-compose up -d --no-deps backend
            
            # 상태 확인
            docker-compose ps
            
            # 미사용 이미지 정리
            docker image prune -f --filter "until=168h"
